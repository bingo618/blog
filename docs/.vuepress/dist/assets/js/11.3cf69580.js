(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{208:function(t,a,r){"use strict";r.r(a);var e=r(28),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"javascript在浏览器中是如何执行的？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#javascript在浏览器中是如何执行的？"}},[t._v("#")]),t._v(" JavaScript在浏览器中是如何执行的？")]),t._v(" "),r("h3",{attrs:{id:"一、chrome浏览器的v8引擎"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一、chrome浏览器的v8引擎"}},[t._v("#")]),t._v(" 一、chrome浏览器的V8引擎")]),t._v(" "),r("p",[t._v("V8 是一个由 Google 开发的开源 JavaScript 引擎，目前用在 Chrome 浏览器和 Node.js 中，其核心功能是执行 JavaScript 代码。")]),t._v(" "),r("h3",{attrs:{id:"二、javascript的虚拟机"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二、javascript的虚拟机"}},[t._v("#")]),t._v(" 二、JavaScript的虚拟机")]),t._v(" "),r("p",[t._v("可以把V8看成JavaScript的虚拟机。\n虚拟机：通过模拟实际计算机的各种功能来实现代码的执行，如模拟实际计算机的 CPU、堆栈、寄存器等，虚拟机还具有它自己的一套指令系统，\n因此当 V8 执行 JavaScript 代码时，也就不需要担心现实中不同操作系统的差异，也不需要担心不同体系结构计算机的差异，你只需要按照虚拟机的规范写好代码就可以了。")]),t._v(" "),r("h3",{attrs:{id:"三、cpu-执行高级语言的方式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三、cpu-执行高级语言的方式"}},[t._v("#")]),t._v(" 三、CPU 执行高级语言的方式")]),t._v(" "),r("h4",{attrs:{id:"_3-1-解释执行"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-解释执行"}},[t._v("#")]),t._v(" 3.1 解释执行")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/jpeg/184136/1591324267819-a49a379d-ea8a-4900-ba2c-f7a541c058d1.jpeg#align=left&display=inline&height=247&margin=%5Bobject%20Object%5D&originHeight=247&originWidth=1142&size=0&status=done&style=none&width=1142",alt:""}}),t._v("\n解释执行，需要先将输入的源代码通过"),r("strong",[t._v("解析器")]),t._v("编译成中间代码，之后直接使用"),r("strong",[t._v("解释器")]),t._v("解释执行中间代码，然后直接输出结果。")]),t._v(" "),r("h4",{attrs:{id:"_3-2-编译执行"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-编译执行"}},[t._v("#")]),t._v(" 3.2 编译执行")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/jpeg/184136/1591324267786-10bf9a9a-8c1e-436b-85bb-405ef2b661af.jpeg#align=left&display=inline&height=330&margin=%5Bobject%20Object%5D&originHeight=330&originWidth=1142&size=0&status=done&style=none&width=1142",alt:""}})]),t._v(" "),r("p",[t._v("编译执行，需要先将输入的源代码通过"),r("strong",[t._v("解析器")]),t._v("编译成中间代码，然后我们的"),r("strong",[t._v("编译器")]),t._v("再将中间代码编译成机器代码。通常编译成的机器代码是以"),r("strong",[t._v("二进制文件")]),t._v("形式存储的，需要执行这段程序的时候直接执行二进制文件就可以了。还可以使用虚拟机将编译后的机器代码保存在内存中，然后直接执行内存中的二进制代码。")]),t._v(" "),r("p",[r("strong",[t._v("两种方法都各自有各自的优缺点，解释执行的启动速度快，但是执行时的速度慢，而编译执行的启动速度慢，但是执行时的速度快。")]),t._v("\n**")]),t._v(" "),r("h3",{attrs:{id:"四、v8-执行javascript的方式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#四、v8-执行javascript的方式"}},[t._v("#")]),t._v(" 四、V8 执行JavaScript的方式")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/jpeg/184136/1591324267799-92a6617f-8bd6-4381-9010-a01e527c4cee.jpeg#align=left&display=inline&height=604&margin=%5Bobject%20Object%5D&originHeight=604&originWidth=1142&size=0&status=done&style=none&width=1142",alt:""}}),t._v("\nV8 并没有采用某种单一的技术，"),r("strong",[t._v("而是混合编译执行和解释执行这两种手段")]),t._v("，我们把这种混合使用编译器和解释器的技术称为 **JIT（Just In Time）**技术。")]),t._v(" "),r("p",[t._v("V8在接收到一段JavaScript源代码时，先通过解析器将源代码结构化，生成便与V8理解的ATS抽象语法树，同时还确定了相关的作用域，作用域中存放了相关的变量。有了ATS和作用域后，就可以生成字节码了，字节码是介于机器码和ATS中间的代码，可以直接被解析器执行，也可以被编译器编译成机器码在执行。")]),t._v(" "),r("p",[t._v("生成了字节码，解释器就登场了，他会按照顺序字节码，并输出执行结果。在解释器执行的过程中，V8引擎还有一个监控解释器执行状态的模块，在解释执行字节码的过程中，如果发现了某一段代码会被重复多次执行，那么监控机器人就会将这段代码标记为热点代码。")]),t._v(" "),r("p",[t._v("当某段代码被标记为热点代码后，V8 就会将这段字节码丢给优化编译器，优化编译器会在后台将字节码编译为二进制代码，然后再对编译后的二进制代码执行优化操作，优化后的二进制机器代码的执行效率会得到大幅提升。如果下面再执行到这段代码时，那么 V8 会优先选择优化之后的二进制代码，这样代码的执行速度就会大幅提升。")]),t._v(" "),r("p",[t._v("V8 采用了一种权衡策略，在启动过程中采用了解释执行的策略，但是如果某段代码的执行频率超过一个值，那么 V8 就会采用优化编译器将其编译成执行效率更加高效的机器代码。")]),t._v(" "),r("h4",{attrs:{id:""}},[r("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])])])}),[],!1,null,null,null);a.default=s.exports}}]);